# SINGLE PIPELINE

plankton.project.directory=
# > Optional
# > Default: `.`

plankton.compose.file=
# > Optional
# > Default: `plankton.compose.yaml` | `plankton.compose.yml` | `compose.yaml` | `compose.yml`

# When running Plankton from within a container, these paths are related to the container file system,
# not to the host file system. Be aware of this when mapping paths between them.

# REQUIRED IF RUNNING FROM CONTAINER
plankton.project.directory.underlying=

# DOCKER
# plankton.docker.enabled=true
plankton.docker.host=unix:///var/run/docker.sock

# SANDBOX
plankton.docker.sandbox.enabled=false
# plankton.docker.sandbox.image=adarlan/plankton:sandbox-with-built-in-images
# plankton.docker.sandbox.cache=/var/lib/docker
# plankton.docker.sandbox.use-host-images=true
# To enable the Docker sandbox, Sysbox Container Runtime (https://github.com/nestybox/sysbox) is required.
# Sandbox cache and image can also be defined dinamically for each user.
# The problem with cache is that each runner instance must have its own caches.
# A cache can not be shared between runner instances neither between nodes becouse of concurrency issues.
# A cache can not be shared between users becuse of security issues.
# So, does not make sense to define cache dinamically.
# use-host-images should not be used on runner-as-a-service

# LOGGING
# logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(:){faint} %m%n
logging.level.root=ERROR
logging.level.me.adarlan.plankton.PlanktonApplication=ERROR
logging.level.me.adarlan.plankton=INFO
# logging.level.me.adarlan.plankton.core=DEBUG
# logging.level.me.adarlan.plankton.docker=DEBUG

# METADATA
# plankton.metadata.directory=/home/adarlan/.plankton
# plankton.metadata.directory.underlying=/home/adarlan/.plankton
# When running Plankton directly from the host, these paths must be the same.
# When running Plankton from within a container, the first option is related to the container file system
# and the second option is related to the host file system.

# RUNNER
# plankton.runner.mode=single-pipeline

# PROFILES
# plankton.compose.profiles=foo,bar
# plankton.compose.profiles.foo.expression='[ "$GIT_BRANCH" = "main" ]'
# spring.Environment environment
# String value = environment.getProperty(propertyName)
# Profiles and profile expressions can also be defined dinamically,
# so each user can have its own profile definitions.

# LIMITS
# plankton.limit.pipeline-timeout=1m
# plankton.limit.simultaneous-containers=3

# WEB
spring.main.web-application-type=none
# server.port=1329
# management.endpoints.web.cors.allowed-origins=*

# SPRING
spring.main.banner-mode=off
# spring.profiles.active=
